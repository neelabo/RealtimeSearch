using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using NeeLaboratory.SourceGenerator.Tools;
using System.ComponentModel;
using System.Linq;

namespace NeeLaboratory.SourceGenerator;

[Generator]
public sealed class NotifyPropertyChangedGenerator : IIncrementalGenerator
{
    private static string _generatorNamespace = "NeeLaboratory.Generators";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(static context =>
        {
            context.AddSource("NotifyPropertyChangedAttribute.g.cs", $$"""
            using System;
            namespace {{_generatorNamespace}};
            
            [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
            internal sealed class NotifyPropertyChangedAttribute : Attribute
            {
            }
            """);
        });

        var source = context.SyntaxProvider.ForAttributeWithMetadataName(
            $"{_generatorNamespace}.NotifyPropertyChangedAttribute",
            static (node, token) => true,
            static (context, token) => context);

        context.RegisterSourceOutput(source, Emit);
    }

    static void Emit(SourceProductionContext context, GeneratorAttributeSyntaxContext source)
    {
        var typeSymbol = (INamedTypeSymbol)source.TargetSymbol;
        var typeNode = (TypeDeclarationSyntax)source.TargetNode;

        if (!typeSymbol.AllInterfaces.Any(e => e.Name == "INotifyPropertyChanged"))
        {
            context.ReportDiagnostic(Diagnostic.Create(DiagnosticDescriptors.INotifyPropertyChangedRequired, typeNode.Identifier.GetLocation(), typeSymbol.Name));
            return;
        }

        var ns = typeSymbol.ContainingNamespace.IsGlobalNamespace
            ? ""
            : $"namespace {typeSymbol.ContainingNamespace};";

        var global = "global::";
        var fullType = typeSymbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
        if (fullType.StartsWith(global))
        {
            fullType = fullType.Substring(global.Length);
        }

        var code = $$"""
            // <auto-generated/>
            #nullable enable
            using System;
            using System.ComponentModel;
            using NeeLaboratory.ComponentModel;
            
            {{ns}}

            partial class {{typeSymbol.Name}}
            {
                protected bool SetProperty<T>(ref T storage, T value, [System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
                {
                    if (object.Equals(storage, value)) return false;
                    storage = value;
                    this.RaisePropertyChanged(propertyName);
                    return true;
                }

                protected void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string? name = null)
                {
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
                }
                        
                public IDisposable SubscribePropertyChanged(string propertyName, PropertyChangedEventHandler handler)
                {
                    PropertyChangedEventHandler h = (s, e) => { if (string.IsNullOrEmpty(e.PropertyName) || e.PropertyName == propertyName) handler?.Invoke(s, e); };
                    PropertyChanged += h;
                    return new AnonymousDisposable(() => PropertyChanged -= h);
                }
            }
            """;

        context.AddSource(PathTools.ReplaceInvalidFileNameChars($"{fullType}.NotifyPropertyChanged.g.cs"), code);
    }
}
